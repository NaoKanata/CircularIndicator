[{"D:\\NaoK\\ChromeExtensions\\CircularIndicator\\src\\index.js":"1","D:\\NaoK\\ChromeExtensions\\CircularIndicator\\src\\App.js":"2","D:\\NaoK\\ChromeExtensions\\CircularIndicator\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":8439,"mtime":1611964028501,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1s7m7of",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\NaoK\\ChromeExtensions\\CircularIndicator\\src\\index.js",[],["17","18"],"D:\\NaoK\\ChromeExtensions\\CircularIndicator\\src\\App.js",["19","20"],"import \"./App.css\";\r\nimport React from 'react';\r\nimport Circle from 'react-circle'\r\nimport {\r\n    Button,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport Logo from './Logo.png';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\n\r\nconst currencies = [\r\n    {\r\n        value: '10',\r\n        label: '10 Minutes',\r\n    },\r\n    {\r\n        value: '15',\r\n        label: '15 Minutes',\r\n    },\r\n    {\r\n        value: '25',\r\n        label: '25 Minutes',\r\n    },\r\n    {\r\n        value: '30',\r\n        label: '30 Minutes',\r\n    },\r\n    {\r\n        value: '45',\r\n        label: '45 Minutes',\r\n    },\r\n    {\r\n        value: '1h',\r\n        label: '1 hour',\r\n    },\r\n];\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            progress: 0,\r\n            hour: 0,\r\n            minute: 25,\r\n            second: 0,\r\n            templete: '25',\r\n        }\r\n        setTimeout(this._timer, 16);\r\n    }\r\n\r\n    _handleChange = (event) => {\r\n        this.setState({ templete: event.target.value });\r\n        switch (event.target.value)\r\n        {\r\n            case '10':\r\n                this.setState({\r\n                    hour: 0,\r\n                    minute: 10,\r\n                    second: 0,\r\n                });\r\n            break;\r\n            case '15':\r\n                this.setState({\r\n                    hour: 0,\r\n                    minute: 15,\r\n                    second: 0,\r\n                });\r\n            break;\r\n            case '25':\r\n                this.setState({\r\n                    hour: 0,\r\n                    minute: 25,\r\n                    second: 0,\r\n                });\r\n            break;\r\n            case '30':\r\n                this.setState({\r\n                    hour: 0,\r\n                    minute: 30,\r\n                    second: 0,\r\n                });\r\n            break;\r\n            case '45':\r\n                this.setState({\r\n                    hour: 0,\r\n                    minute: 45,\r\n                    second: 0,\r\n                });\r\n            break;\r\n            case '1h':\r\n                this.setState({\r\n                    hour: 1,\r\n                    minute: 0,\r\n                    second: 0,\r\n                });\r\n            break;\r\n        }\r\n    };\r\n\r\n    _isRunning = () => {\r\n        if (localStorage.getItem(\"isRunning\") != \"false\") {\r\n            return (\r\n                <div class=\"hgoehoge\">\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={this._stopClick}>\r\n                        <StopIcon />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <div class=\"inputContainer\">\r\n                        <div class=\"inputItem\">\r\n                            <TextField\r\n                                name=\"hour\"\r\n                                id=\"filled-basic\"\r\n                                label=\"Hour\"\r\n                                variant=\"filled\"\r\n                                type=\"number\"\r\n                                fullWidth=\"true\"\r\n                                value={this.state.hour}\r\n                                onChange={this._inputChange}\r\n                            />\r\n                        </div>\r\n                        <div class=\"inputItem\">\r\n                            <TextField\r\n                                name=\"minute\"\r\n                                id=\"filled-basic\"\r\n                                label=\"Minute\"\r\n                                variant=\"filled\"\r\n                                type=\"number\"\r\n                                fullWidth=\"true\"\r\n                                value={this.state.minute}\r\n                                onChange={this._inputChange}\r\n                            />\r\n                        </div>\r\n                        <div class=\"inputItem\">\r\n                            <TextField\r\n                                name=\"second\"\r\n                                id=\"filled-basic\"\r\n                                label=\"Second\"\r\n                                variant=\"filled\"\r\n                                type=\"number\"\r\n                                fullWidth=\"true\"\r\n                                value={this.state.second}\r\n                                onChange={this._inputChange}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={this._click}>\r\n                        <PlayArrowIcon />\r\n                    </Button>\r\n                    <div class=\"TempleteField\">\r\n                        <TextField\r\n                            id=\"standard-select-currency\"\r\n                            select\r\n                            label=\"Templete\"\r\n                            value={this.state.templete}\r\n                            helperText=\"Please select a templete.\"\r\n                            onChange={this._handleChange}\r\n                        >\r\n                            {currencies.map((option) => (\r\n                                <MenuItem key={option.value} value={option.value}>\r\n                                    {option.label}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                    </div>\r\n                    <div class=\"OtherButtonContainer\">\r\n                        <div class=\"OtherButton\">\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={this._clickAddPage}>\r\n                                <PostAddIcon />\r\n                            </Button>\r\n                        </div>\r\n                        <div class=\"OtherButton\">\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={this._clickGithub}>\r\n                                <GitHubIcon />\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                    <p>Copyright © 2021 naok All Rights Reserved.</p>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"App\">\r\n                <div>\r\n                    <img src={Logo} alt=\"Circular Indicator\" width=\"82px\"/>\r\n                </div>\r\n                <Circle\r\n                    animate={false}\r\n                    size={200}\r\n                    lineWidth={40}\r\n                    progress={this.state.progress}\r\n                    bgColor=\"#dddddd\"\r\n                    progressColor=\"#22769c\"\r\n                    showPercentage={false}\r\n                    roundedStroke={true}\r\n                />\r\n                {this._isRunning()}\r\n                {/* <p>{localStorage.getItem(\"length\")}</p>\r\n                <p>{localStorage.getItem(\"isRunning\")}</p> */}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    _inputChange = (event) => {\r\n        const target = event.target;\r\n        this.setState({\r\n            [target.name]: target.value\r\n        });\r\n        this.setState({ templete: 'Customized' });\r\n    }\r\n\r\n    _timer = () => {\r\n        // background.js で算出された localStorage.getItem(\"progress\") を取得するようにする\r\n        this.setState({\r\n            progress: localStorage.getItem(\"progress\")\r\n        });\r\n        setTimeout(this._timer, 16)\r\n    }\r\n\r\n    _stopClick = () => {\r\n        localStorage.setItem(\"length\", 0);\r\n        localStorage.setItem(\"nowDate\", null);\r\n        localStorage.setItem(\"isRunning\", false);\r\n    }\r\n\r\n    _click = () => {\r\n        // ここでは必要な情報を送る\r\n        // - インターバルの長さ\r\n        // - 開始時刻\r\n        localStorage.setItem(\"length\", Number(this.state.hour) * 60 * 60 + Number(this.state.minute) * 60 + Number(this.state.second));\r\n        localStorage.setItem(\"nowDate\", (new Date()).getTime());\r\n        localStorage.setItem(\"isRunning\", true);\r\n    }\r\n\r\n    _clickGithub = () => {\r\n        window.open('https://github.com/NaoKanata/CircularIndicator', '_blank');\r\n    }\r\n\r\n\r\n    _clickAddPage = () => {\r\n        window.open('./index.html', '_blank');\r\n    }\r\n}\r\n\r\nexport default App;\r\n","D:\\NaoK\\ChromeExtensions\\CircularIndicator\\src\\reportWebVitals.js",[],["21","22"],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":59,"column":9,"nodeType":"29","messageId":"30","endLine":103,"endColumn":10},{"ruleId":"31","severity":1,"message":"32","line":107,"column":47,"nodeType":"33","messageId":"34","endLine":107,"endColumn":49},{"ruleId":"23","replacedBy":"35"},{"ruleId":"25","replacedBy":"36"},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["37"],["38"],"no-global-assign","no-unsafe-negation"]